import ply.lex as lex
import ply.yacc as yacc

# Lista tokenów
tokens = (
    'NUMBER',
    'PLUS',
    'TIMES',
    'EQ',
    'LPAREN',
    'RPAREN',
    'SEMICOLON',
    'ID',
    'INT',
    'PRINT'
)

# Definicje tokenów
t_PLUS = r'\+'
t_TIMES = r'\*'
t_LPAREN = r'\('
t_RPAREN = r'\)'
t_EQ = r'='

# Token dla int
def t_INT(t):
    r'LICZBA'
    t.value = 'int'
    return t

def t_SEMICOLON(t):
    r'->'
    t.value = ';'
    return t

def t_PRINT(t):
    r'POKAZ'
    return t

# Ignorowanie białych znaków
t_ignore = ' \t'

# Definicja funkcji dla tokenów
def t_NUMBER(t):
    r'\d+'
    t.value = int(t.value)
    return t

def t_ID(t):
    r'[a-zA-Z_][a-zA-Z0-9_]*'
    return t

# Obsługa błędów
def t_error(t):
    print(f'Nieprawidłowy znak: {t.value[0]}')
    t.lexer.skip(1)

# Budowanie leksera
lexer = lex.lex()

# Definicje gramatyczne
def p_statements(p):
    '''
    statements : statements statement
               | statement
    '''
    if len(p) == 2:
        p[0] = p[1]
    else:
        p[0] = p[1] + p[2]

def p_statement(p):
    '''
    statement : INT ID EQ NUMBER SEMICOLON
              | ID EQ expression SEMICOLON
              | expression SEMICOLON
    '''
    p[0] = ' '.join(map(str, p[1:])) + '\n'

def p_expression_plus(p):
    '''expression : expression PLUS term
                  | term'''
    if len(p) > 2:
        p[0] = f"({p[1]} + {p[3]})"
    else:
        p[0] = p[1]

def p_term_times(p):
    '''term : term TIMES factor
            | factor'''
    if len(p) > 2:
        p[0] = f"({p[1]} * {p[3]})"
    else:
        p[0] = p[1]

def p_factor(p):
    '''factor : NUMBER
              | LPAREN expression RPAREN
              | ID'''
    if len(p) > 2:
        p[0] = p[2]
    else:
        p[0] = p[1]

def p_error(p):
    print("Błąd składni")

# Budowanie parsera
parser = yacc.yacc()

# Przykładowy pseudokod wejściowy z identyfikatorami
pseudocode_input = """
LICZBA e = 0 ->
LICZBA a = 1 ->
e = a + b * c + 2 ->
"""

# Parsowanie pseudokodu
parsed_code = parser.parse(pseudocode_input)

# Wygenerowanie kodu w Javie na podstawie pseudokodu
# java_code = f"public class Main {{\n\tpublic static void main(String[] args) {{\n\t\t{parsed_code}\n\t}}\n}}"
java_code = f'{parsed_code}'
print("Wygenerowany kod w Javie:")
print(java_code)
