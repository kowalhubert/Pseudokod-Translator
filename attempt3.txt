import ply.lex as lex
import ply.yacc as yacc

# Lista tokenów
tokens = (
    'NUMBER',
    'PLUS',
    'MINUS',
    'TIMES',
    'DIVIDE',
    'LPAREN',
    'RPAREN',
    'VARIABLE',
    'ASSIGN',
    'FROM',
    'TO',
    'STEP',
    'IF',
    'ELSE',
    'PRINT',
    'DLA',
)

# Definicja tokenów
t_PLUS = r'\+'
t_MINUS = r'-'
t_TIMES = r'\*'
t_DIVIDE = r'/'
t_LPAREN = r'\('
t_RPAREN = r'\)'
t_ASSIGN = r'='
t_FROM = r'FROM'
t_TO = r'TO'
t_STEP = r'STEP'
t_IF = r'IF'
t_ELSE = r'ELSE'
t_PRINT = r'WYPISZ'
t_DLA = r'DLA'

# Ignorowanie spacji i tabulatorów
t_ignore = ' \t\n'

# Definicja funkcji dla tokenów
def t_NUMBER(t):
    r'\d+'
    t.value = int(t.value)
    return t

def t_VARIABLE(t):
    r'[a-zA-Z_][a-zA-Z0-9_]*'
    return t

# Obsługa błędów
def t_error(t):
    print(f"Nieznany znak: '{t.value[0]}'")
    t.lexer.skip(1)

# Budowa parsera
def p_statement(p):
    '''
    statement : expression
              | assignment
              | dla_loop
              | if_else
              | print_statement
    '''
    p[0] = p[1]

def p_expression(p):
    '''
    expression : expression PLUS term
               | expression MINUS term
               | term
    '''
    if len(p) == 2:
        p[0] = p[1]
    elif p[2] == '+':
        p[0] = f"{p[1]} + {p[3]}"
    elif p[2] == '-':
        p[0] = f"{p[1]} - {p[3]}"

def p_term(p):
    '''
    term : term TIMES factor
         | term DIVIDE factor
         | factor
    '''
    if len(p) == 2:
        p[0] = p[1]
    elif p[2] == '*':
        p[0] = f"{p[1]} * {p[3]}"
    elif p[2] == '/':
        p[0] = f"{p[1]} / {p[3]}"

def p_factor(p):
    '''
    factor : NUMBER
           | LPAREN expression RPAREN
           | VARIABLE
    '''
    if len(p) == 2:
        p[0] = str(p[1])
    elif len(p) == 4:
        p[0] = f"({p[2]})"
    else:
        p[0] = p[1]

def p_assignment(p):
    '''
    assignment : VARIABLE ASSIGN expression
    '''
    p[0] = f"{p[1]} = {p[3]}"

def p_dla_loop(p):
    '''
    dla_loop : DLA VARIABLE FROM expression TO expression STEP expression RPAREN statement
    '''
    p[0] = f"for (int {p[2]} = {p[4]}; {p[2]} <= {p[6]}; {p[2]} += {p[8]}) {{\n{p[10]}\n}}"

def p_if_else(p):
    '''
    if_else : IF expression statement ELSE statement
    '''
    p[0] = f"if ({p[2]}) {{\n{p[3]}\n}} else {{\n{p[5]}\n}}"

def p_print_statement(p):
    '''
    print_statement : PRINT LPAREN expression RPAREN
    '''
    p[0] = f"System.out.println({p[3]});"

def p_error(p):
    if p:
        print(f"Syntax error at '{p.value}'")
    else:
        print("Syntax error at EOF")

lexer = lex.lex()
parser = yacc.yacc()

# Przykładowy kod pseudokodu z pętlą
input_code = """
WYPISZ (a);
"""

# Parsowanie i wygenerowanie kodu Java
parsed_code = parser.parse(input_code)
java_code = f"""
public class Main {{
    public static void main(String[] args) {{
        {parsed_code}
    }}
}}
"""
print("Kod w języku Java:")
print(java_code)
